/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.authtimesheet;

import java.util.HashMap;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.util.Log;
import org.appcelerator.titanium.util.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;
import org.appcelerator.titanium.TiApplication;

import org.appcelerator.kroll.KrollFunction;

import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;

import android.app.Activity;
import android.support.v4.app.FragmentActivity;
import android.content.Intent;
import android.os.Bundle;

import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.auth.api.signin.GoogleSignInResult;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.Scopes;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Scope;
import com.google.android.gms.common.api.Status;

//backend id: 1047497242003-nul6kfbbg32krgj6ik46o3mnp04ej9as.apps.googleusercontent.com
// This proxy can be created by calling Authtimesheet.createSigin({message: "hello world"})
@Kroll.proxy(creatableInModule=AuthtimesheetModule.class)
public class SigninProxy extends TiViewProxy implements GoogleApiClient.OnConnectionFailedListener, TiActivityResultHandler
{
	// Standard Debugging variables
	private static final String LCAT = "SigninProxy";
	private static final boolean DBG = TiConfig.LOGD;

	private static final int RC_GET_AUTH_CODE = 9003;
	private GoogleApiClient mGoogleApiClient = null;
	protected String serverClientId = "1047497242003-nul6kfbbg32krgj6ik46o3mnp04ej9as.apps.googleusercontent.com";

	protected KrollFunction onSuccess;

	private class SigninView extends TiUIView
	{
		public SigninView(TiViewProxy proxy) {
			super(proxy);
			LayoutArrangement arrangement = LayoutArrangement.DEFAULT;

			if (proxy.hasProperty(TiC.PROPERTY_LAYOUT)) {
				String layoutProperty = TiConvert.toString(proxy.getProperty(TiC.PROPERTY_LAYOUT));
				if (layoutProperty.equals(TiC.LAYOUT_HORIZONTAL)) {
					arrangement = LayoutArrangement.HORIZONTAL;
				} else if (layoutProperty.equals(TiC.LAYOUT_VERTICAL)) {
					arrangement = LayoutArrangement.VERTICAL;
				}
			}
			setNativeView(new TiCompositeLayout(proxy.getActivity(), arrangement));
		}

		@Override
		public void processProperties(KrollDict d)
		{
			super.processProperties(d);
		}
	}


	// Constructor
	public SigninProxy()
	{
		super();
	}

	@Override
    public void onConnectionFailed(ConnectionResult connectionResult) {
        // An unresolvable error has occurred and Google APIs (including Sign-In) will not
        // be available.
        Log.d(LCAT, "onConnectionFailed:" + connectionResult);
    }

	@Override
	public TiUIView createView(Activity activity)
	{
		TiUIView view = new SigninView(this);
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;

		if(mGoogleApiClient == null){
			GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
	                .requestScopes(new Scope(Scopes.DRIVE_APPFOLDER), new Scope(Scopes.DRIVE_FILE))
	                .requestIdToken(serverClientId)
						 .requestServerAuthCode(serverClientId, false)
	                .requestEmail()
	                .build();
	        // [END configure_signin]
			  Activity act = TiApplication.getAppRootOrCurrentActivity();
	        // Build GoogleAPIClient with the Google Sign-In API and the above options.
			  mGoogleApiClient = new GoogleApiClient.Builder(act)
	                .enableAutoManage((FragmentActivity)act /* FragmentActivity */, this /* OnConnectionFailedListener */)
	                .addApi(Auth.GOOGLE_SIGN_IN_API, gso)
	                .build();
		  }
		  return view;
	}

   @Override
 	public void onResult(Activity activity, int thisRequestCode, int resultCode, Intent data){
 		Log.i(LCAT, "onResult Called");
 		if (onSuccess == null) return;

 		if ( thisRequestCode == RC_GET_AUTH_CODE) {
 			GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);
 				if(result.isSuccess()){
 					GoogleSignInAccount acct = result.getSignInAccount();
 					HashMap event = new HashMap();
 					event.put("name", acct.getDisplayName());
 					event.put("email", acct.getEmail());
 					event.put("id_token", acct.getIdToken());
					event.put("serverAuthCode", acct.getServerAuthCode());
 					event.put("photo", acct.getPhotoUrl().toString());
 					this.onSuccess.call(getKrollObject(),event);
 			}
 		}
 	}

	@Kroll.method
	public void signOut() {
		// mGoogleApiClient.connect();
		// if(mGoogleApiClient.isConnected()) {
		// 	Auth.GoogleSignInApi.signOut(mGoogleApiClient).setResultCallback(
		// 		new ResultCallback<Status>() {
		// 			@Override
		// 			public void onResult(Status status) {
		// 			}
		// 		}
		// 	);
		// }
		mGoogleApiClient.connect();
		mGoogleApiClient.registerConnectionCallbacks(new GoogleApiClient.ConnectionCallbacks() {
		@Override
		public void onConnected(Bundle bundle) {
			   if(mGoogleApiClient.isConnected()) {
			       Auth.GoogleSignInApi.signOut(mGoogleApiClient).setResultCallback(new ResultCallback<Status>() {
			           @Override
			           public void onResult(Status status) {
			               if (status.isSuccess()) {
			                   Log.d(LCAT, "User Logged out");
			               //     Intent intent = new Intent(LogoutActivity.this, LoginActivity.class);
			               //     startActivity(intent);
			               //     finish();
			               }
			           }
			       });
			   }
			}
			@Override
			public void onConnectionSuspended(int i) {
			   Log.d(LCAT, "Google API Client Connection Suspended");
			}
		});
	}

	@Kroll.method
	public void signIn() {
        // Start the retrieval process for a server auth code.  If requested, ask for a refresh
        // token.  Otherwise, only get an access token if a refresh token has been previously
        // retrieved.  Getting a new access token for an existing grant does not require
        // user consent.
        Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);
		  Activity activity = TiApplication.getInstance().getCurrentActivity();
		  TiActivitySupport support = (TiActivitySupport) activity;
      //   activity.startActivityForResult(signInIntent, RC_GET_AUTH_CODE);
		  support.launchActivityForResult(signInIntent, RC_GET_AUTH_CODE, this);
    }

 	@Override
 	public void onError(Activity activity, int requestCode, Exception e){
 		Log.i(LCAT, "onError Called");
 	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);

		if (options.containsKey("serverClientId")) {
			this.serverClientId = options.get("serverClientId").toString();
		}
		if (options.containsKey("onSuccess")) {
			this.onSuccess = (KrollFunction)options.get("onSuccess");
		}

		if (options.containsKey("message")) {
			Log.d(LCAT, "example created with message: " + options.get("message"));
		}
	}

	// Methods
	@Kroll.method
	public void printMessage(String message)
	{
		Log.d(LCAT, "printing message: " + message);
	}


	@Kroll.getProperty @Kroll.method
	public String getMessage()
	{
        return "Hello World from my module";
	}

	@Kroll.setProperty @Kroll.method
	public void setMessage(String message)
	{
	    Log.d(LCAT, "Tried setting module message to: " + message);
	}
}
