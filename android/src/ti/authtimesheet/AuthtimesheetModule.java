/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.authtimesheet;

import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollInvocation;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiContext;
import org.appcelerator.kroll.KrollFunction;

import android.app.Activity;
import android.support.v4.app.FragmentActivity;
import android.content.Intent;
import android.os.Bundle;

import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.auth.api.signin.GoogleSignInResult;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.Scopes;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Scope;
import com.google.android.gms.common.api.Status;


@Kroll.module(name="Authtimesheet", id="ti.authtimesheet")
public class AuthtimesheetModule extends KrollModule implements TiActivityResultHandler
{

	// Standard Debugging variables
	private static final String LCAT = "AuthtimesheetModule";
	private static final boolean DBG = TiConfig.LOGD;

	private static final int RC_GET_AUTH_CODE = 9003;
	private GoogleApiClient mGoogleApiClient;
	private String serverClientId = "1047497242003-nul6kfbbg32krgj6ik46o3mnp04ej9as.apps.googleusercontent.com";

	protected int requestCode;
	protected KrollFunction onSuccess;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public AuthtimesheetModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
	}

	@Kroll.method
	public void getAuthCode(KrollFunction handler) {
		GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestScopes(new Scope(Scopes.DRIVE_APPFOLDER))
                .requestServerAuthCode(serverClientId)
                .requestEmail()
                .build();
        // [END configure_signin]

		  Activity act = TiApplication.getAppRootOrCurrentActivity();
        // Build GoogleAPIClient with the Google Sign-In API and the above options.
		  if(mGoogleApiClient == null){
			  mGoogleApiClient = new GoogleApiClient.Builder(act)
	                .enableAutoManage((FragmentActivity)act /* FragmentActivity */,
						 	new GoogleApiClient.OnConnectionFailedListener(){
								@Override
							    public void onConnectionFailed(ConnectionResult connectionResult) {
							        // An unresolvable error has occurred and Google APIs (including Sign-In) will not
							        // be available.
							        Log.d(LCAT, "onConnectionFailed:" + connectionResult);
							    }
						 	} /* OnConnectionFailedListener */)
	                .addApi(Auth.GOOGLE_SIGN_IN_API, gso)
	                .build();
			// put module init code that needs to run when the application is created
		}
		  this.onSuccess = handler;
        // Start the retrieval process for a server auth code.  If requested, ask for a refresh
        // token.  Otherwise, only get an access token if a refresh token has been previously
        // retrieved.  Getting a new access token for an existing grant does not require
        // user consent.
        Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);
		  Activity activity = TiApplication.getAppRootOrCurrentActivity();
		  TiActivitySupport support = (TiActivitySupport) activity;
		//   requestCode = support.getUniqueResultCode();

      //   activity.startActivityForResult(signInIntent, RC_GET_AUTH_CODE);
		  support.launchActivityForResult(signInIntent, RC_GET_AUTH_CODE, this);
    }

	@Override
	public void onResult(Activity activity, int thisRequestCode, int resultCode, Intent data){
		Log.i(LCAT, "onResult Called");
		if (onSuccess == null) return;

		if ( thisRequestCode == RC_GET_AUTH_CODE) {
			GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);
				if(result.isSuccess()){
					GoogleSignInAccount acct = result.getSignInAccount();
					HashMap event = new HashMap();
					event.put("name", acct.getDisplayName());
					event.put("email", acct.getEmail());
					event.put("access_token", acct.getIdToken());
					event.put("photo", acct.getPhotoUrl().toString());
					this.onSuccess.call(getKrollObject(),event);
			}
		}
	}

	@Override
	public void onError(Activity activity, int requestCode, Exception e){
		Log.i(LCAT, "onError Called");
	}

	// Methods
	@Kroll.method
	public String example()
	{
		Log.d(LCAT, "example called");
		return "hello world";
	}

	// Properties
	@Kroll.getProperty
	public String getExampleProp()
	{
		Log.d(LCAT, "get example property");
		return "hello world";
	}


	@Kroll.setProperty
	public void setExampleProp(String value) {
		Log.d(LCAT, "set example property: " + value);
	}

}
